/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace AVAXGods {
  export type BattleStruct = {
    battleStatus: PromiseOrValue<BigNumberish>;
    battleHash: PromiseOrValue<BytesLike>;
    name: PromiseOrValue<string>;
    players: [PromiseOrValue<string>, PromiseOrValue<string>];
    moves: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    winner: PromiseOrValue<string>;
  };

  export type BattleStructOutput = [
    number,
    string,
    string,
    [string, string],
    [number, number],
    string
  ] & {
    battleStatus: number;
    battleHash: string;
    name: string;
    players: [string, string];
    moves: [number, number];
    winner: string;
  };

  export type GameTokenStruct = {
    name: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
    attackStrength: PromiseOrValue<BigNumberish>;
    defenseStrength: PromiseOrValue<BigNumberish>;
  };

  export type GameTokenStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    name: string;
    id: BigNumber;
    attackStrength: BigNumber;
    defenseStrength: BigNumber;
  };

  export type PlayerStruct = {
    playerAddress: PromiseOrValue<string>;
    playerName: PromiseOrValue<string>;
    playerMana: PromiseOrValue<BigNumberish>;
    playerHealth: PromiseOrValue<BigNumberish>;
    inBattle: PromiseOrValue<boolean>;
  };

  export type PlayerStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    playerAddress: string;
    playerName: string;
    playerMana: BigNumber;
    playerHealth: BigNumber;
    inBattle: boolean;
  };
}

export interface AVAXGodsInterface extends utils.Interface {
  functions: {
    "CELESTION()": FunctionFragment;
    "DEVIL()": FunctionFragment;
    "FIREBIRD()": FunctionFragment;
    "GRIFFIN()": FunctionFragment;
    "KAMO()": FunctionFragment;
    "KUKULKAN()": FunctionFragment;
    "MAX_ATTACK_DEFEND_STRENGTH()": FunctionFragment;
    "attackOrDefendChoice(uint8,string)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "baseURI()": FunctionFragment;
    "battleInfo(string)": FunctionFragment;
    "battles(uint256)": FunctionFragment;
    "createBattle(string)": FunctionFragment;
    "createRandomGameToken(string)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "gameTokens(uint256)": FunctionFragment;
    "getAllBattles()": FunctionFragment;
    "getAllPlayerTokens()": FunctionFragment;
    "getAllPlayers()": FunctionFragment;
    "getBattle(string)": FunctionFragment;
    "getBattleMoves(string)": FunctionFragment;
    "getPlayer(address)": FunctionFragment;
    "getPlayerToken(address)": FunctionFragment;
    "getTotalSupply()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isBattle(string)": FunctionFragment;
    "isPlayer(address)": FunctionFragment;
    "isPlayerToken(address)": FunctionFragment;
    "joinBattle(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "playerInfo(address)": FunctionFragment;
    "playerTokenInfo(address)": FunctionFragment;
    "players(uint256)": FunctionFragment;
    "quitBattle(string)": FunctionFragment;
    "registerPlayer(string,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setURI(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CELESTION"
      | "CELESTION()"
      | "DEVIL"
      | "DEVIL()"
      | "FIREBIRD"
      | "FIREBIRD()"
      | "GRIFFIN"
      | "GRIFFIN()"
      | "KAMO"
      | "KAMO()"
      | "KUKULKAN"
      | "KUKULKAN()"
      | "MAX_ATTACK_DEFEND_STRENGTH"
      | "MAX_ATTACK_DEFEND_STRENGTH()"
      | "attackOrDefendChoice"
      | "attackOrDefendChoice(uint8,string)"
      | "balanceOf"
      | "balanceOf(address,uint256)"
      | "balanceOfBatch"
      | "balanceOfBatch(address[],uint256[])"
      | "baseURI"
      | "baseURI()"
      | "battleInfo"
      | "battleInfo(string)"
      | "battles"
      | "battles(uint256)"
      | "createBattle"
      | "createBattle(string)"
      | "createRandomGameToken"
      | "createRandomGameToken(string)"
      | "exists"
      | "exists(uint256)"
      | "gameTokens"
      | "gameTokens(uint256)"
      | "getAllBattles"
      | "getAllBattles()"
      | "getAllPlayerTokens"
      | "getAllPlayerTokens()"
      | "getAllPlayers"
      | "getAllPlayers()"
      | "getBattle"
      | "getBattle(string)"
      | "getBattleMoves"
      | "getBattleMoves(string)"
      | "getPlayer"
      | "getPlayer(address)"
      | "getPlayerToken"
      | "getPlayerToken(address)"
      | "getTotalSupply"
      | "getTotalSupply()"
      | "isApprovedForAll"
      | "isApprovedForAll(address,address)"
      | "isBattle"
      | "isBattle(string)"
      | "isPlayer"
      | "isPlayer(address)"
      | "isPlayerToken"
      | "isPlayerToken(address)"
      | "joinBattle"
      | "joinBattle(string)"
      | "owner"
      | "owner()"
      | "playerInfo"
      | "playerInfo(address)"
      | "playerTokenInfo"
      | "playerTokenInfo(address)"
      | "players"
      | "players(uint256)"
      | "quitBattle"
      | "quitBattle(string)"
      | "registerPlayer"
      | "registerPlayer(string,string)"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "safeBatchTransferFrom"
      | "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
      | "safeTransferFrom"
      | "safeTransferFrom(address,address,uint256,uint256,bytes)"
      | "setApprovalForAll"
      | "setApprovalForAll(address,bool)"
      | "setURI"
      | "setURI(string)"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "tokenURI"
      | "tokenURI(uint256)"
      | "totalSupply()"
      | "totalSupply(uint256)"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "uri"
      | "uri(uint256)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CELESTION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CELESTION()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DEVIL", values?: undefined): string;
  encodeFunctionData(functionFragment: "DEVIL()", values?: undefined): string;
  encodeFunctionData(functionFragment: "FIREBIRD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FIREBIRD()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GRIFFIN", values?: undefined): string;
  encodeFunctionData(functionFragment: "GRIFFIN()", values?: undefined): string;
  encodeFunctionData(functionFragment: "KAMO", values?: undefined): string;
  encodeFunctionData(functionFragment: "KAMO()", values?: undefined): string;
  encodeFunctionData(functionFragment: "KUKULKAN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "KUKULKAN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ATTACK_DEFEND_STRENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ATTACK_DEFEND_STRENGTH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attackOrDefendChoice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "attackOrDefendChoice(uint8,string)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch(address[],uint256[])",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseURI()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "battleInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "battleInfo(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "battles",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "battles(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createBattle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createBattle(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createRandomGameToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createRandomGameToken(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exists(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameTokens(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBattles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBattles()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlayerTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlayerTokens()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlayers()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBattle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattle(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattleMoves",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattleMoves(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBattle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBattle(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayer(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinBattle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinBattle(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerInfo(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerTokenInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerTokenInfo(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "players(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quitBattle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quitBattle(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlayer",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlayer(string,string)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll(address,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setURI(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uri(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "CELESTION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CELESTION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DEVIL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DEVIL()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FIREBIRD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FIREBIRD()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GRIFFIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GRIFFIN()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KAMO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KAMO()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KUKULKAN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KUKULKAN()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ATTACK_DEFEND_STRENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ATTACK_DEFEND_STRENGTH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attackOrDefendChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attackOrDefendChoice(uint8,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch(address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "battleInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "battleInfo(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "battles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "battles(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBattle(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRandomGameToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRandomGameToken(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exists(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameTokens(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBattles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBattles()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayerTokens()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayers()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBattle(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBattleMoves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBattleMoves(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayer(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBattle(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPlayer(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinBattle(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerInfo(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerTokenInfo(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "players(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quitBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quitBattle(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayer(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setURI(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenURI(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uri(uint256)",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BattleEnded(string,address,address)": EventFragment;
    "BattleMove(string,bool)": EventFragment;
    "NewBattle(string,address,address)": EventFragment;
    "NewGameToken(address,uint256,uint256,uint256)": EventFragment;
    "NewPlayer(address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoundEnded(address[2])": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BattleEnded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BattleEnded(string,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BattleMove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BattleMove(string,bool)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBattle"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewBattle(string,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGameToken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewGameToken(address,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPlayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPlayer(address,string)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundEnded(address[2])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferBatch(address,address,address,uint256[],uint256[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferSingle(address,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI(string,uint256)"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BattleEndedEventObject {
  battleName: string;
  winner: string;
  loser: string;
}
export type BattleEndedEvent = TypedEvent<
  [string, string, string],
  BattleEndedEventObject
>;

export type BattleEndedEventFilter = TypedEventFilter<BattleEndedEvent>;

export interface BattleMoveEventObject {
  battleName: string;
  isFirstMove: boolean;
}
export type BattleMoveEvent = TypedEvent<
  [string, boolean],
  BattleMoveEventObject
>;

export type BattleMoveEventFilter = TypedEventFilter<BattleMoveEvent>;

export interface NewBattleEventObject {
  battleName: string;
  player1: string;
  player2: string;
}
export type NewBattleEvent = TypedEvent<
  [string, string, string],
  NewBattleEventObject
>;

export type NewBattleEventFilter = TypedEventFilter<NewBattleEvent>;

export interface NewGameTokenEventObject {
  owner: string;
  id: BigNumber;
  attackStrength: BigNumber;
  defenseStrength: BigNumber;
}
export type NewGameTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  NewGameTokenEventObject
>;

export type NewGameTokenEventFilter = TypedEventFilter<NewGameTokenEvent>;

export interface NewPlayerEventObject {
  owner: string;
  name: string;
}
export type NewPlayerEvent = TypedEvent<[string, string], NewPlayerEventObject>;

export type NewPlayerEventFilter = TypedEventFilter<NewPlayerEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoundEndedEventObject {
  damagedPlayers: [string, string];
}
export type RoundEndedEvent = TypedEvent<
  [[string, string]],
  RoundEndedEventObject
>;

export type RoundEndedEventFilter = TypedEventFilter<RoundEndedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface AVAXGods extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AVAXGodsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CELESTION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "CELESTION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEVIL(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DEVIL()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    FIREBIRD(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FIREBIRD()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    GRIFFIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    "GRIFFIN()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    KAMO(overrides?: CallOverrides): Promise<[BigNumber]>;

    "KAMO()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    KUKULKAN(overrides?: CallOverrides): Promise<[BigNumber]>;

    "KUKULKAN()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ATTACK_DEFEND_STRENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_ATTACK_DEFEND_STRENGTH()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    attackOrDefendChoice(
      _choice: PromiseOrValue<BigNumberish>,
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "attackOrDefendChoice(uint8,string)"(
      _choice: PromiseOrValue<BigNumberish>,
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,uint256)"(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    "baseURI()"(overrides?: CallOverrides): Promise<[string]>;

    battleInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "battleInfo(string)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    battles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string] & {
        battleStatus: number;
        battleHash: string;
        name: string;
        winner: string;
      }
    >;

    "battles(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string] & {
        battleStatus: number;
        battleHash: string;
        name: string;
        winner: string;
      }
    >;

    createBattle(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRandomGameToken(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createRandomGameToken(string)"(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    gameTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        name: string;
        id: BigNumber;
        attackStrength: BigNumber;
        defenseStrength: BigNumber;
      }
    >;

    "gameTokens(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        name: string;
        id: BigNumber;
        attackStrength: BigNumber;
        defenseStrength: BigNumber;
      }
    >;

    getAllBattles(
      overrides?: CallOverrides
    ): Promise<[AVAXGods.BattleStructOutput[]]>;

    "getAllBattles()"(
      overrides?: CallOverrides
    ): Promise<[AVAXGods.BattleStructOutput[]]>;

    getAllPlayerTokens(
      overrides?: CallOverrides
    ): Promise<[AVAXGods.GameTokenStructOutput[]]>;

    "getAllPlayerTokens()"(
      overrides?: CallOverrides
    ): Promise<[AVAXGods.GameTokenStructOutput[]]>;

    getAllPlayers(
      overrides?: CallOverrides
    ): Promise<[AVAXGods.PlayerStructOutput[]]>;

    "getAllPlayers()"(
      overrides?: CallOverrides
    ): Promise<[AVAXGods.PlayerStructOutput[]]>;

    getBattle(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AVAXGods.BattleStructOutput]>;

    "getBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AVAXGods.BattleStructOutput]>;

    getBattleMoves(
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { P1Move: BigNumber; P2Move: BigNumber }
    >;

    "getBattleMoves(string)"(
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { P1Move: BigNumber; P2Move: BigNumber }
    >;

    getPlayer(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AVAXGods.PlayerStructOutput]>;

    "getPlayer(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AVAXGods.PlayerStructOutput]>;

    getPlayerToken(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AVAXGods.GameTokenStructOutput]>;

    "getPlayerToken(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AVAXGods.GameTokenStructOutput]>;

    getTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBattle(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPlayer(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPlayer(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPlayerToken(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPlayerToken(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinBattle(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "joinBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    playerInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "playerInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    playerTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "playerTokenInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean] & {
        playerAddress: string;
        playerName: string;
        playerMana: BigNumber;
        playerHealth: BigNumber;
        inBattle: boolean;
      }
    >;

    "players(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean] & {
        playerAddress: string;
        playerName: string;
        playerMana: BigNumber;
        playerHealth: BigNumber;
        inBattle: boolean;
      }
    >;

    quitBattle(
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "quitBattle(string)"(
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerPlayer(
      _name: PromiseOrValue<string>,
      _gameTokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerPlayer(string,string)"(
      _name: PromiseOrValue<string>,
      _gameTokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setURI(string)"(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uri(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "uri(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  CELESTION(overrides?: CallOverrides): Promise<BigNumber>;

  "CELESTION()"(overrides?: CallOverrides): Promise<BigNumber>;

  DEVIL(overrides?: CallOverrides): Promise<BigNumber>;

  "DEVIL()"(overrides?: CallOverrides): Promise<BigNumber>;

  FIREBIRD(overrides?: CallOverrides): Promise<BigNumber>;

  "FIREBIRD()"(overrides?: CallOverrides): Promise<BigNumber>;

  GRIFFIN(overrides?: CallOverrides): Promise<BigNumber>;

  "GRIFFIN()"(overrides?: CallOverrides): Promise<BigNumber>;

  KAMO(overrides?: CallOverrides): Promise<BigNumber>;

  "KAMO()"(overrides?: CallOverrides): Promise<BigNumber>;

  KUKULKAN(overrides?: CallOverrides): Promise<BigNumber>;

  "KUKULKAN()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ATTACK_DEFEND_STRENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_ATTACK_DEFEND_STRENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

  attackOrDefendChoice(
    _choice: PromiseOrValue<BigNumberish>,
    _battleName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "attackOrDefendChoice(uint8,string)"(
    _choice: PromiseOrValue<BigNumberish>,
    _battleName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  "baseURI()"(overrides?: CallOverrides): Promise<string>;

  battleInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "battleInfo(string)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  battles(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string] & {
      battleStatus: number;
      battleHash: string;
      name: string;
      winner: string;
    }
  >;

  "battles(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string] & {
      battleStatus: number;
      battleHash: string;
      name: string;
      winner: string;
    }
  >;

  createBattle(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createBattle(string)"(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRandomGameToken(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createRandomGameToken(string)"(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exists(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "exists(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  gameTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      name: string;
      id: BigNumber;
      attackStrength: BigNumber;
      defenseStrength: BigNumber;
    }
  >;

  "gameTokens(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      name: string;
      id: BigNumber;
      attackStrength: BigNumber;
      defenseStrength: BigNumber;
    }
  >;

  getAllBattles(
    overrides?: CallOverrides
  ): Promise<AVAXGods.BattleStructOutput[]>;

  "getAllBattles()"(
    overrides?: CallOverrides
  ): Promise<AVAXGods.BattleStructOutput[]>;

  getAllPlayerTokens(
    overrides?: CallOverrides
  ): Promise<AVAXGods.GameTokenStructOutput[]>;

  "getAllPlayerTokens()"(
    overrides?: CallOverrides
  ): Promise<AVAXGods.GameTokenStructOutput[]>;

  getAllPlayers(
    overrides?: CallOverrides
  ): Promise<AVAXGods.PlayerStructOutput[]>;

  "getAllPlayers()"(
    overrides?: CallOverrides
  ): Promise<AVAXGods.PlayerStructOutput[]>;

  getBattle(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AVAXGods.BattleStructOutput>;

  "getBattle(string)"(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AVAXGods.BattleStructOutput>;

  getBattleMoves(
    _battleName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { P1Move: BigNumber; P2Move: BigNumber }>;

  "getBattleMoves(string)"(
    _battleName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { P1Move: BigNumber; P2Move: BigNumber }>;

  getPlayer(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AVAXGods.PlayerStructOutput>;

  "getPlayer(address)"(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AVAXGods.PlayerStructOutput>;

  getPlayerToken(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AVAXGods.GameTokenStructOutput>;

  "getPlayerToken(address)"(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AVAXGods.GameTokenStructOutput>;

  getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBattle(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isBattle(string)"(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPlayer(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPlayer(address)"(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPlayerToken(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPlayerToken(address)"(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinBattle(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "joinBattle(string)"(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  playerInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "playerInfo(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  playerTokenInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "playerTokenInfo(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  players(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, boolean] & {
      playerAddress: string;
      playerName: string;
      playerMana: BigNumber;
      playerHealth: BigNumber;
      inBattle: boolean;
    }
  >;

  "players(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, boolean] & {
      playerAddress: string;
      playerName: string;
      playerMana: BigNumber;
      playerHealth: BigNumber;
      inBattle: boolean;
    }
  >;

  quitBattle(
    _battleName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "quitBattle(string)"(
    _battleName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerPlayer(
    _name: PromiseOrValue<string>,
    _gameTokenName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerPlayer(string,string)"(
    _name: PromiseOrValue<string>,
    _gameTokenName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setURI(
    newuri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setURI(string)"(
    newuri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uri(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "uri(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    CELESTION(overrides?: CallOverrides): Promise<BigNumber>;

    "CELESTION()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEVIL(overrides?: CallOverrides): Promise<BigNumber>;

    "DEVIL()"(overrides?: CallOverrides): Promise<BigNumber>;

    FIREBIRD(overrides?: CallOverrides): Promise<BigNumber>;

    "FIREBIRD()"(overrides?: CallOverrides): Promise<BigNumber>;

    GRIFFIN(overrides?: CallOverrides): Promise<BigNumber>;

    "GRIFFIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    KAMO(overrides?: CallOverrides): Promise<BigNumber>;

    "KAMO()"(overrides?: CallOverrides): Promise<BigNumber>;

    KUKULKAN(overrides?: CallOverrides): Promise<BigNumber>;

    "KUKULKAN()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ATTACK_DEFEND_STRENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_ATTACK_DEFEND_STRENGTH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    attackOrDefendChoice(
      _choice: PromiseOrValue<BigNumberish>,
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "attackOrDefendChoice(uint8,string)"(
      _choice: PromiseOrValue<BigNumberish>,
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    "baseURI()"(overrides?: CallOverrides): Promise<string>;

    battleInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "battleInfo(string)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    battles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string] & {
        battleStatus: number;
        battleHash: string;
        name: string;
        winner: string;
      }
    >;

    "battles(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string] & {
        battleStatus: number;
        battleHash: string;
        name: string;
        winner: string;
      }
    >;

    createBattle(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AVAXGods.BattleStructOutput>;

    "createBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AVAXGods.BattleStructOutput>;

    createRandomGameToken(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "createRandomGameToken(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    gameTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        name: string;
        id: BigNumber;
        attackStrength: BigNumber;
        defenseStrength: BigNumber;
      }
    >;

    "gameTokens(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        name: string;
        id: BigNumber;
        attackStrength: BigNumber;
        defenseStrength: BigNumber;
      }
    >;

    getAllBattles(
      overrides?: CallOverrides
    ): Promise<AVAXGods.BattleStructOutput[]>;

    "getAllBattles()"(
      overrides?: CallOverrides
    ): Promise<AVAXGods.BattleStructOutput[]>;

    getAllPlayerTokens(
      overrides?: CallOverrides
    ): Promise<AVAXGods.GameTokenStructOutput[]>;

    "getAllPlayerTokens()"(
      overrides?: CallOverrides
    ): Promise<AVAXGods.GameTokenStructOutput[]>;

    getAllPlayers(
      overrides?: CallOverrides
    ): Promise<AVAXGods.PlayerStructOutput[]>;

    "getAllPlayers()"(
      overrides?: CallOverrides
    ): Promise<AVAXGods.PlayerStructOutput[]>;

    getBattle(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AVAXGods.BattleStructOutput>;

    "getBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AVAXGods.BattleStructOutput>;

    getBattleMoves(
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { P1Move: BigNumber; P2Move: BigNumber }
    >;

    "getBattleMoves(string)"(
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { P1Move: BigNumber; P2Move: BigNumber }
    >;

    getPlayer(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AVAXGods.PlayerStructOutput>;

    "getPlayer(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AVAXGods.PlayerStructOutput>;

    getPlayerToken(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AVAXGods.GameTokenStructOutput>;

    "getPlayerToken(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AVAXGods.GameTokenStructOutput>;

    getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBattle(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPlayer(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPlayer(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPlayerToken(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPlayerToken(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinBattle(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AVAXGods.BattleStructOutput>;

    "joinBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AVAXGods.BattleStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    playerInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "playerInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "playerTokenInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean] & {
        playerAddress: string;
        playerName: string;
        playerMana: BigNumber;
        playerHealth: BigNumber;
        inBattle: boolean;
      }
    >;

    "players(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean] & {
        playerAddress: string;
        playerName: string;
        playerMana: BigNumber;
        playerHealth: BigNumber;
        inBattle: boolean;
      }
    >;

    quitBattle(
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "quitBattle(string)"(
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPlayer(
      _name: PromiseOrValue<string>,
      _gameTokenName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerPlayer(string,string)"(
      _name: PromiseOrValue<string>,
      _gameTokenName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setURI(string)"(
      newuri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "uri(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BattleEnded(string,address,address)"(
      battleName?: null,
      winner?: PromiseOrValue<string> | null,
      loser?: PromiseOrValue<string> | null
    ): BattleEndedEventFilter;
    BattleEnded(
      battleName?: null,
      winner?: PromiseOrValue<string> | null,
      loser?: PromiseOrValue<string> | null
    ): BattleEndedEventFilter;

    "BattleMove(string,bool)"(
      battleName?: PromiseOrValue<string> | null,
      isFirstMove?: PromiseOrValue<boolean> | null
    ): BattleMoveEventFilter;
    BattleMove(
      battleName?: PromiseOrValue<string> | null,
      isFirstMove?: PromiseOrValue<boolean> | null
    ): BattleMoveEventFilter;

    "NewBattle(string,address,address)"(
      battleName?: null,
      player1?: PromiseOrValue<string> | null,
      player2?: PromiseOrValue<string> | null
    ): NewBattleEventFilter;
    NewBattle(
      battleName?: null,
      player1?: PromiseOrValue<string> | null,
      player2?: PromiseOrValue<string> | null
    ): NewBattleEventFilter;

    "NewGameToken(address,uint256,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      id?: null,
      attackStrength?: null,
      defenseStrength?: null
    ): NewGameTokenEventFilter;
    NewGameToken(
      owner?: PromiseOrValue<string> | null,
      id?: null,
      attackStrength?: null,
      defenseStrength?: null
    ): NewGameTokenEventFilter;

    "NewPlayer(address,string)"(
      owner?: PromiseOrValue<string> | null,
      name?: null
    ): NewPlayerEventFilter;
    NewPlayer(
      owner?: PromiseOrValue<string> | null,
      name?: null
    ): NewPlayerEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RoundEnded(address[2])"(damagedPlayers?: null): RoundEndedEventFilter;
    RoundEnded(damagedPlayers?: null): RoundEndedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
  };

  estimateGas: {
    CELESTION(overrides?: CallOverrides): Promise<BigNumber>;

    "CELESTION()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEVIL(overrides?: CallOverrides): Promise<BigNumber>;

    "DEVIL()"(overrides?: CallOverrides): Promise<BigNumber>;

    FIREBIRD(overrides?: CallOverrides): Promise<BigNumber>;

    "FIREBIRD()"(overrides?: CallOverrides): Promise<BigNumber>;

    GRIFFIN(overrides?: CallOverrides): Promise<BigNumber>;

    "GRIFFIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    KAMO(overrides?: CallOverrides): Promise<BigNumber>;

    "KAMO()"(overrides?: CallOverrides): Promise<BigNumber>;

    KUKULKAN(overrides?: CallOverrides): Promise<BigNumber>;

    "KUKULKAN()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ATTACK_DEFEND_STRENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_ATTACK_DEFEND_STRENGTH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    attackOrDefendChoice(
      _choice: PromiseOrValue<BigNumberish>,
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "attackOrDefendChoice(uint8,string)"(
      _choice: PromiseOrValue<BigNumberish>,
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    "baseURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    battleInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "battleInfo(string)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    battles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "battles(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createBattle(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRandomGameToken(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createRandomGameToken(string)"(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "gameTokens(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllBattles(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllBattles()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPlayerTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllPlayerTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllPlayers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBattle(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBattleMoves(
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBattleMoves(string)"(
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayer(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPlayer(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerToken(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPlayerToken(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBattle(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPlayer(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPlayer(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPlayerToken(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPlayerToken(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinBattle(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "joinBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    playerInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "playerInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "playerTokenInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "players(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quitBattle(
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "quitBattle(string)"(
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerPlayer(
      _name: PromiseOrValue<string>,
      _gameTokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerPlayer(string,string)"(
      _name: PromiseOrValue<string>,
      _gameTokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setURI(string)"(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uri(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uri(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CELESTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CELESTION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEVIL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DEVIL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FIREBIRD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FIREBIRD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GRIFFIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GRIFFIN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KAMO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "KAMO()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KUKULKAN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "KUKULKAN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ATTACK_DEFEND_STRENGTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_ATTACK_DEFEND_STRENGTH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    attackOrDefendChoice(
      _choice: PromiseOrValue<BigNumberish>,
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "attackOrDefendChoice(uint8,string)"(
      _choice: PromiseOrValue<BigNumberish>,
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    battleInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "battleInfo(string)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    battles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "battles(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createBattle(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRandomGameToken(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createRandomGameToken(string)"(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gameTokens(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllBattles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllBattles()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPlayerTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllPlayerTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllPlayers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBattle(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBattleMoves(
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBattleMoves(string)"(
      _battleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayer(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPlayer(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerToken(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPlayerToken(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBattle(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPlayer(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPlayer(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPlayerToken(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPlayerToken(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinBattle(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "joinBattle(string)"(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerTokenInfo(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "players(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quitBattle(
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "quitBattle(string)"(
      _battleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerPlayer(
      _name: PromiseOrValue<string>,
      _gameTokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerPlayer(string,string)"(
      _name: PromiseOrValue<string>,
      _gameTokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setURI(string)"(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
